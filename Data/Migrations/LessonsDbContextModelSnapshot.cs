// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(LessonsDbContext))]
    partial class LessonsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("uid");

                    b.Property<ushort>("Duration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("duration");

                    b.Property<int>("LessonStateTypeUid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lesson_state_type_uid");

                    b.Property<int>("LessonTypeUid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lesson_type_uid");

                    b.Property<ushort>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("starting_time");

                    b.HasKey("Uid")
                        .HasName("lesson__pk");

                    b.HasIndex("LessonStateTypeUid");

                    b.HasIndex("LessonTypeUid");

                    b.ToTable("lesson", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LessonStateType", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("uid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Uid")
                        .HasName("lesson_state_type__pk");

                    b.ToTable("lesson_state_type", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LessonStudent", b =>
                {
                    b.Property<int>("LessonUid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lesson_uid");

                    b.Property<int>("StudentUid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("student_uid");

                    b.HasKey("LessonUid", "StudentUid")
                        .HasName("lesson_student__pk");

                    b.HasIndex("StudentUid");

                    b.ToTable("lesson_student", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LessonType", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("uid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Uid")
                        .HasName("lesson_type__pk");

                    b.ToTable("lesson_type", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("uid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Uid")
                        .HasName("student__pk");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Domain.Entities.LessonStateType", "StateType")
                        .WithMany()
                        .HasForeignKey("LessonStateTypeUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LessonType", "Type")
                        .WithMany()
                        .HasForeignKey("LessonTypeUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.LessonStudent", b =>
                {
                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonStudents")
                        .HasForeignKey("LessonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("StudentLessons")
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Navigation("LessonStudents");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("StudentLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
